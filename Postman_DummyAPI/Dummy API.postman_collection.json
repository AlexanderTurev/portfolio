{
	"info": {
		"_postman_id": "31ef6897-35bb-46ea-a73f-f683f26f8eda",
		"name": "Dummy API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20722159"
	},
	"item": [
		{
			"name": "Получение списка пользователей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = JSON.parse(responseBody);\r",
							"console.log(responseData)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the data object\", function () {  \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.data[0].lastName).to.exist.and.to.be.an('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the picture URL in each user object is valid and accessible\", function () {\r",
							"    pm.expect(responseData.data).to.be.an('array').and.not.to.be.empty;\r",
							"\r",
							"    responseData.data.forEach(function(user) {\r",
							"        pm.expect(user.picture).to.exist.and.to.be.a('string');\r",
							"        pm.expect(user.picture).to.match(/^https?:\\/\\/.+$/, \"Picture URL should be valid and accessible\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "app-id",
						"value": "{{app-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://dummyapi.io/data/v1/user",
					"protocol": "https",
					"host": [
						"dummyapi",
						"io"
					],
					"path": [
						"data",
						"v1",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var id = pm.response.json().id\r",
							"pm.collectionVariables.set(\"user_id\", id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"FirstName from request = firstName from response\", function () {\r",
							"    let requestData = JSON.parse(pm.request.body.raw);\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(requestData.firstName).to.eql(responseData.firstName);\r",
							"});\r",
							"\r",
							"pm.test(\"id is a non-empty string\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid email format\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "app-id",
						"value": "{{app-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"{{$randomUserName}}\",\r\n    \"lastName\":\"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummyapi.io/data/v1/user/create",
					"protocol": "https",
					"host": [
						"dummyapi",
						"io"
					],
					"path": [
						"data",
						"v1",
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"lastName is a non-empty string\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.lastName).to.exist.and.to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "app-id",
						"value": "{{app-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Fishman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummyapi.io/data/v1/user/{{user_id}}",
					"protocol": "https",
					"host": [
						"dummyapi",
						"io"
					],
					"path": [
						"data",
						"v1",
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "app-id",
						"value": "{{app-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://dummyapi.io/data/v1/user/{{user_id}}",
					"protocol": "https",
					"host": [
						"dummyapi",
						"io"
					],
					"path": [
						"data",
						"v1",
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание пользователя с применением неверного метода",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"PARAMS_NOT_VALID\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "app-id",
						"value": "{{app-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"Jack\",\r\n    \"lastName\":\"Freeman\",\r\n    \"email\": \"mrfreeman@mail.net\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummyapi.io/data/v1/user/create",
					"protocol": "https",
					"host": [
						"dummyapi",
						"io"
					],
					"path": [
						"data",
						"v1",
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"PARAMS_NOT_VALID\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "app-id",
						"value": "{{app-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://dummyapi.io/data/v1/user/{{$randomInt}}",
					"protocol": "https",
					"host": [
						"dummyapi",
						"io"
					],
					"path": [
						"data",
						"v1",
						"user",
						"{{$randomInt}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание пользователя без тела запроса",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"BODY_NOT_VALID\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check error for lastName\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.lastName).to.eql(\"Path `lastName` is required.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check error for firstName\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.firstName).to.eql(\"Path `firstName` is required.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check error for email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.email).to.eql(\"Path `email` is required.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "app-id",
						"value": "{{app-id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://dummyapi.io/data/v1/user/create",
					"protocol": "https",
					"host": [
						"dummyapi",
						"io"
					],
					"path": [
						"data",
						"v1",
						"user",
						"create"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "app-id",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		}
	]
}